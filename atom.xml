<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>萝卜的空间</title>
  <subtitle>我的小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dishibolei.github.io/"/>
  <updated>2017-05-19T05:22:05.000Z</updated>
  <id>https://dishibolei.github.io/</id>
  
  <author>
    <name>bolei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IOS应用安全-HTTP/HTTPS网络安全(二)</title>
    <link href="https://dishibolei.github.io/2017/05/15/https-safe-2/"/>
    <id>https://dishibolei.github.io/2017/05/15/https-safe-2/</id>
    <published>2017-05-15T04:46:53.000Z</published>
    <updated>2017-05-19T05:22:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>导读</p>
<p>本文主要讲解IOS中ATS相关的配置说明和使用AFNetworking框架来实现证书验证的方法。讲解了AFNetworking各个配置试用的场景和注意点。</p>
</blockquote>
<a id="more"></a>
<h1 id="ATS"><a href="#ATS" class="headerlink" title="ATS"></a>ATS</h1><p>IOS9之后，苹果开启了App Transport Security（简称ATS）特性,即<strong>禁止HTTP请求，必须使用支持</strong>TLS1.2<strong>的HTTPS请求</strong>。但是也支持在Info.plist中做一些配置，来做缓冲。需要在info.plist中加入<code>App Transport Security Settings</code>字段。</p>
<p>plist里面的结构如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSAppTransportSecurity</span> : Dictionary &#123;</div><div class="line">    <span class="built_in">NSAllowsArbitraryLoads</span> : Boolean</div><div class="line">    <span class="built_in">NSAllowsArbitraryLoadsForMedia</span> : Boolean</div><div class="line">    <span class="built_in">NSAllowsArbitraryLoadsInWebContent</span> : Boolean</div><div class="line">    <span class="built_in">NSAllowsLocalNetworking</span> : Boolean</div><div class="line">    <span class="built_in">NSExceptionDomains</span> : Dictionary &#123;</div><div class="line">        &lt;domain-name-string&gt; : Dictionary &#123;</div><div class="line">            <span class="built_in">NSIncludesSubdomains</span> : Boolean</div><div class="line">            <span class="built_in">NSExceptionAllowsInsecureHTTPLoads</span> : Boolean</div><div class="line">            <span class="built_in">NSExceptionMinimumTLSVersion</span> : String</div><div class="line">            <span class="built_in">NSExceptionRequiresForwardSecrecy</span> : Boolean   <span class="comment">// Default value is YES</span></div><div class="line">            <span class="built_in">NSRequiresCertificateTransparency</span> : Boolean</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ATS整体配置（NSAllowsArbitraryLoads）"><a href="#ATS整体配置（NSAllowsArbitraryLoads）" class="headerlink" title="ATS整体配置（NSAllowsArbitraryLoads）"></a>ATS整体配置（NSAllowsArbitraryLoads）</h2><ol>
<li><p>配置ATS生效或不生效</p>
<p> 在<code>App Transport Security Settings</code>字段下加入<code>Allow Arbitrary Loads</code>，或<code>NSAllowsArbitraryLoads</code>，配置为NO。PS：如果要禁用则为YES。但是如果配置为YES会导致审核失败，需要单独向APPStrore申诉说明。</p>
</li>
<li><p>配置web(H5)访问限制生效或不生效 </p>
<p>在<code>App Transport Security Settings</code>字段下加入<code>Allow Arbitrary Loads in Web Content</code>或<code>NSAllowsArbitraryLoadsInWebContent</code>，默认配置生效为NO。如果要容许访问任意web网页内容，配置为YES。但是如果配置为YES会导致审核失败，需要单独向APPStrore申诉说明。</p>
</li>
<li><p>配置多媒体访问限制生效或不生效</p>
<p>在<code>App Transport Security Settings</code>字段下加入<code>Allow Arbitrary Loads in Web Content</code>，默认配置生效为NO。设置YES，容许访问通过AVFoundation框架访问媒体内容。</p>
</li>
</ol>
<h2 id="ATS根据域名配置（Exception-Domains）"><a href="#ATS根据域名配置（Exception-Domains）" class="headerlink" title="ATS根据域名配置（Exception Domains）"></a>ATS根据域名配置（Exception Domains）</h2><p>在<code>App Transport Security Settings</code>字段下加入<code>Exception Domains</code>或<code>NSExceptionDomains</code>,<strong>系统优先响应<code>NSExceptionDomains</code>中的配置</strong>。比如之前设置NSAllowsArbitraryLoadsInMedia为 YES，然而NSExceptionDomain所代表的域名，如果没有特殊配置，依然默认不能访问不安全的媒体内容。</p>
<ol>
<li><p>加入域名配置</p>
<p> 在<code>Exception Domains</code>下，添加字典。其中key为域名的名称，比如<code>baidu.com</code>。</p>
</li>
<li><p>容许访问HTTP</p>
<p>在步骤1对应的域名字典下，加入字段<code>NSExceptionAllowsInsecureHTTPLoads</code>.默认为NO，如果设置YES，则容许访问HTTP</p>
</li>
<li><p>容许TLS支持非正向保密算法（Perfect Forward Secrecy）</p>
<p> 在步骤1对应的域名字典下，加入字段<code>NSExceptionRequiresForwardSecrecy</code>.默认为YES。如果设置为NO，则支持非正向保密的加密算法。</p>
<p>正向保密算法（Forward Secrecy），指如果通信密钥泄露，使用FS算法，可以保证这个密钥泄露只会影响之后的加密数据，之前的加密数据无法解密。主要防止攻击者保存之前的数据，等到私钥泄露之后再解密数据。这个算法的基础是基于椭圆曲线向前保密的秘钥交换算法ECDHE（Elliptic Curve Diffie-Hellman Ephemeral）。这些算法有：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</div><div class="line">TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</div><div class="line">TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</div><div class="line">TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</div><div class="line">TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</div><div class="line">TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</div><div class="line">TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</div><div class="line">TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</div><div class="line">TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</div><div class="line">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</div><div class="line">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>如果设置为NO，则非正向保密算法，有下面几种：

<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">TLS_RSA_WITH_AES_256_GCM_SHA384</div><div class="line">TLS_RSA_WITH_AES_128_GCM_SHA256</div><div class="line">TLS_RSA_WITH_AES_256_CBC_SHA256</div><div class="line">TLS_RSA_WITH_AES_256_CBC_SHA</div><div class="line">TLS_RSA_WITH_AES_128_CBC_SHA256</div><div class="line">TLS_RSA_WITH_AES_128_CBC_SHA</div></pre></td></tr></table></figure>


具体原理参考[TLS/SSL 高级进阶](http://www.open-open.com/lib/view/open1477548899809.html)。
</code></pre><ol>
<li><p>容许支持低版本的TLS算法。   </p>
<p>在步骤1对应的域名字典下，加入字段<code>NSExceptionMinimumTLSVersion</code>。值为对应的支持的最低版本。包含下面值</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TLSv1.0</div><div class="line">TLSv1.1</div><div class="line">TLSv1.2</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>包含域名下的所有子域名。</p>
<p>在步骤1对应的域名字典下，加入字段<code>NSIncludesSubdomains</code>。默认为NO。如果配置为YES则包含域名下的所有子域名。</p>
</li>
<li><p>开启Certificate Transparency</p>
<p> 在步骤1对应的域名字典下，加入字段<code>NSRequiresCertificateTransparency</code>,这个默认为NO.如果设为YES，则开启Certificate Transparency。这个是IETF启动的一个开源项目，目的是进一步验证证书是否安全。个人觉得没什么用，没必要开启。</p>
</li>
</ol>
<h2 id="ATS各种字段含义说明"><a href="#ATS各种字段含义说明" class="headerlink" title="ATS各种字段含义说明"></a>ATS各种字段含义说明</h2><p>主要的几个key：</p>
<ul>
<li><p>NSAllowsArbitraryLoads</p>
<blockquote>
<p>默认NO。如果设置为YES，则不生效ATS规则。但是配置在NSExceptionDomains里面的规则，按照里面的规则生效。配置为YES，提交APP Strore需要说明</p>
</blockquote>
</li>
<li><p>NSAllowsArbitraryLoadsForMedia</p>
<blockquote>
<p>默认NO.如果设置为YES，那使用AVFoundation加载资源不生效ATS。</p>
</blockquote>
</li>
<li><p>NSAllowsArbitraryLoadsInWebContent</p>
<blockquote>
<p>默认NO.如果设置为YES.使用webview加载的页面资源不生效ATS。</p>
</blockquote>
</li>
<li><p>NSExceptionDomains</p>
<blockquote>
<p>用于单独配置其他域名ATS策略的键。值应该是字典类型。</p>
</blockquote>
</li>
</ul>
<p>下面是NSExceptionDomains相关的key</p>
<ul>
<li><p>NSIncludesSubdomains</p>
<blockquote>
<p>默认NO。如果设置为YES，则生效此域名下的子域名</p>
</blockquote>
</li>
<li><p>NSExceptionAllowsInsecureHTTPLoads</p>
<blockquote>
<p>默认NO。如果设置为YES，则容许HTTP请求。设置YES，在审核时需要提供说明。</p>
</blockquote>
</li>
<li><p>NSExceptionMinimumTLSVersion</p>
<blockquote>
<p>默认TLSv1.2。可以设置为：TLSv1.0、TLSv1.1。在审核时需要提供说明</p>
</blockquote>
</li>
<li><p>NSExceptionRequiresForwardSecrecy</p>
<blockquote>
<p>默认YES。设置为NO标示不支持正向保密。</p>
</blockquote>
</li>
<li><p>NSRequiresCertificateTransparency</p>
<blockquote>
<p>默认NO。如果设置为YES，开启Certificate Transparency。</p>
</blockquote>
</li>
</ul>
<p>上面的是方便本人查找，详细设置case也可以参考[ATS 官方文档] (<a href="https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW35" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW35</a>)<br>。目前过渡阶段最多出现的是第三方不兼容的问题+不支持NSExceptionRequiresForwardSecrecy+TLS版本不到1.2+h5访问的链接不支持ATS。按照要求配置就可以了，最重要的是推动第三方和自己后台使用HTTPS。自己的后台如果要求不高，可以用自制证书。</p>
<p>推荐的一个配置：</p>
<p>自己的域名使用最安全的方案，防止被苹果拒绝。第三方可以按照需求配置，但是审核时也建议进一步说明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">NSAppTransportSecurity</div><div class="line">    NSExceptionDomains</div><div class="line">        &quot;domain-i-control.example.com&quot; // 后台的域名</div><div class="line">            NSExceptionAllowsInsecureHTTPLoads = NO //不容许HTTP</div><div class="line">            NSExceptionRequiresForwardSecrecy = YES //支持正向加密</div><div class="line">            NSExceptionMinimumTLSVersion = &quot;TLSv1.2&quot; //使用1.2版本</div><div class="line">            NSIncludesSubdomains = YES //包含子域名</div><div class="line">        &quot;other-domain-i-control.example.com&quot; //部分不支持的第三方域名</div><div class="line">            NSExceptionAllowsInsecureHTTPLoads = NO  //支持http</div><div class="line">            NSExceptionRequiresForwardSecrecy = YES  //不支持正向加密</div><div class="line">            NSExceptionMinimumTLSVersion = &quot;TLSv1.0&quot; //第三方支持的TLS版本</div><div class="line">    NSAllowsArbitraryLoads = NO</div></pre></td></tr></table></figure>
<h1 id="使用AFNetworking配置HTTPS安全"><a href="#使用AFNetworking配置HTTPS安全" class="headerlink" title="使用AFNetworking配置HTTPS安全"></a>使用AFNetworking配置HTTPS安全</h1><p>AFNetworking是最常用的网络框架。所以以这个为基础说明一些配置信息。本人是使用2.6版本的，2.6及3.x版本，安全验证的逻辑没有变化，可以参考，2.6之前的版本，建议配置项显示配置，不要用默认配置（因为有个版本有漏洞，默认不校验域名）。下面先讲解下配置参数，清楚之后再讲解代码实现。</p>
<h2 id="AFSecurityPolicy说明"><a href="#AFSecurityPolicy说明" class="headerlink" title="AFSecurityPolicy说明"></a>AFSecurityPolicy说明</h2><p>AFNetworking使用<code>AFSecurityPolicy</code>类来管理安全策略。</p>
<p>主要的属性和方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) AFSSLPinningMode SSLPinningMode; <span class="comment">//证书验证的策略</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> allowInvalidCertificates; <span class="comment">//是否容许无效的证书</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> validatesDomainName; <span class="comment">//是否验证证书的域名</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">NSArray</span> *pinnedCertificates; <span class="comment">//app自己导入的证书文件，默认情况下主bundle里面的.cer文件都会导入到这个数组里。</span></div></pre></td></tr></table></figure>
<h3 id="validatesDomainName-说明"><a href="#validatesDomainName-说明" class="headerlink" title="validatesDomainName 说明"></a>validatesDomainName 说明</h3><p>是否容许证书包含的域名和实际访问的域名不匹配，默认为YES。采用的策略为：</p>
<ol>
<li>如果validatesDomainName == YES，则开启域名验证。如果allowInvalidCertificates == NO，则不容许所用的证书里面的域名和实际域名不一致。如果allowInvalidCertificates == YES，则忽略域名验证，直接按照AFSSLPinningMode方式验证。</li>
<li>如果validatesDomainName == NO,则不对证书做域名验证。</li>
</ol>
<h3 id="allowInvalidCertificates-说明"><a href="#allowInvalidCertificates-说明" class="headerlink" title="allowInvalidCertificates 说明"></a>allowInvalidCertificates 说明</h3><p>是否容许无效证书，默认为NO。采用的策略为：</p>
<ol>
<li>如果allowInvalidCertificates == YES，则容许使用自制证书，或容许CA颁发的证书或系统信任的第三方证书（比如手动信任Charles证书）无效（包括域名无效和超过有效期）</li>
<li>如果allowInvalidCertificates == NO，那无法使用自制证书，且不容许CA颁发的证书或系统信任的第三方证书（比如手动信任Charles证书）超过有效期。如果配置了validatesDomainName == YES，则容许证书的域名不匹配，否则也不容许域名不匹配。</li>
</ol>
<h3 id="SSLPinningMode-说明"><a href="#SSLPinningMode-说明" class="headerlink" title="SSLPinningMode 说明"></a>SSLPinningMode 说明</h3><p>证书文件实体验证策略，默认为AFSSLPinningModeNone。AFSSLPinningMode包括的值为：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, AFSSLPinningMode) &#123;</div><div class="line">    AFSSLPinningModeNone,</div><div class="line">    AFSSLPinningModePublicKey,</div><div class="line">    AFSSLPinningModeCertificate</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><p>AFSSLPinningModeNone。AFNetworking默认配置模式。采用的策略为：</p>
<ol>
<li>如果容许无效证书（allowInvalidCertificates == YES），则直接返回验证成功（YES）</li>
<li>如果不容许无效证书（allowInvalidCertificates == YES），则验证证书是否有效：是否是CA颁发机构颁发的或者是否是系统信任的第三方证书（比如手动信任Charles证书）。如果另外配置了validatesDomainName == YES，则需要证书对应的域名是否匹配。如果配置了validatesDomainName == NO,则不验证证书对应的域名是否匹配。  </li>
</ol>
</li>
<li><p>AFSSLPinningModePublicKey。验证证书公钥模式。采用的策略为：</p>
<ol>
<li>如果容许无效证书（allowInvalidCertificates == YES），则比对服务端发来的证书链中的公钥和自己加入的所有证书的的公钥是否匹配，只要有一个证书匹配就返回成功。</li>
<li>如果不容许无效证书（allowInvalidCertificates == YES），则先验证证书是否有效：是否是CA颁发机构颁发的或者是否是系统信任的第三方证书（比如手动信任Charles证书）。如果另外配置了validatesDomainName == YES，则需要证书对应的域名是否匹配。如果配置了validatesDomainName == NO,则不验证证书对应的域名是否匹配。验证通过后，则比对服务端发来的证书链中的公钥和自己加入的所有证书的的公钥是否匹配，只要有一个证书匹配就返回成功。   </li>
</ol>
</li>
<li><p>AFSSLPinningModeCertificate。证书完全匹配模式。采用的策略为：</p>
<ol>
<li>如果容许无效证书（allowInvalidCertificates == YES），则将自己导入的所有证书作为锚点，判断服务端是否有效。如果有效，判断服务端证书链中的证书中，是否有证书包含在导入的证书里（使用二进制比较，也就是必须完全一样）。</li>
<li>如果不容许无效证书（allowInvalidCertificates == YES），则先验证证书是否有效：是否是CA颁发机构颁发的或者是否是系统信任的第三方证书（比如手动信任Charles证书）。如果另外配置了validatesDomainName == YES，则需要证书对应的域名是否匹配。如果配置了validatesDomainName == NO,则不验证证书对应的域名是否匹配。验证通过后，则将自己导入的所有证书作为锚点，判断服务端是否有效。如果有效，判断服务端证书链中的证书中，是否有证书包含在导入的证书里（使用二进制比较，也就是必须完全一样）。</li>
</ol>
</li>
</ul>
<p>上面的比较绕，其实就是三个配置的组合。下面把这几种组合起来，看看验证了什么，使用于什么策略。其中AC表示allowInvalidCertificates，VD表示validatesDomainName。需要的可以去查这个表来决定方案。</p>
<table>
<thead>
<tr>
<th>场景</th>
<th>mode</th>
<th>AC</th>
<th>VD</th>
<th>验证策略</th>
<th>适用场景</th>
<th>不适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>None</td>
<td>NO</td>
<td>YES</td>
<td><div>1.验证证书是否为信任的颁发机构颁发或是否为用户手动信任的证书</div><div>2.验证证书是否过期</div><div>3.验证证书域名是否匹配</div></td>
<td><div>1.AF默认的安全策略</div><div>2.对于安全有基础的要求</div><div>3.使用CA机构颁发的证书</div></td>
<td><div>1.使用自制证书的</div> <div>2.不容许使用第三方抓包工具抓包的应用</div></td>
</tr>
<tr>
<td>2</td>
<td>None</td>
<td>NO</td>
<td>NO</td>
<td><div>1.验证证书是否为信任的颁发机构颁发或是否为用户手动信任的证书</div><div>2.验证证书是否过期</div></td>
<td>1.证书是正规CA颁发的。但是使用的域名不是证书中的域名</td>
<td><div>1.存在风险，会导致攻击方使用自己的合法的CA证书进行攻击</div> <div>2.使用自制证书的</div> <div>3.不容许使用第三方抓包工具抓包的应用</div></td>
</tr>
<tr>
<td>3</td>
<td>None</td>
<td>YES</td>
<td>YES /NO</td>
<td>不对证书做任何验证</td>
<td>请勿使用这儿配置。 1.对安全没有要求的</td>
<td>1.对安全有要求的</td>
</tr>
<tr>
<td>4</td>
<td>PublicKey</td>
<td>NO</td>
<td>YES</td>
<td><div>1.验证证书是否为信任的颁发机构颁发或是否为用户手动信任的证书</div>2.验证证书是否过期 <div>3.验证证书域名是否匹配</div><div>4.验证证书和埋入的证书的公钥是否一致</div></td>
<td><div>1.证书是正规CA颁发的。</div>2.对安全有比较高的需求 <div>3.需要本地APP中导入证书</div> <div>4.禁止第三方工具抓包</div> <div>5.证书过期后只要保证公钥一致，就可以保证请求有效</div></td>
<td><div>1.使用自制证书的</div>2.害怕攻击者拿到私钥或公钥文件，伪造证书（概率极低，因为需要CA机构再签发） <div>3.证书过期需要更换，但是新旧证书公钥不同</div></td>
</tr>
<tr>
<td>5</td>
<td>PublicKey</td>
<td>NO</td>
<td>NO</td>
<td><div>1.验证证书是否为信任的颁发机构颁发或是否为用户手动信任的证书</div> <div>2.验证证书是否过期</div> <div>3.验证证书和埋入的证书的公钥是否一致</div></td>
<td><div> 1.证书是正规CA颁发的。</div> <div>2.需要本地APP中导入证书</div> <div>3.禁止第三方工具抓包</div> <div>4.使用的域名和证书域名不一致</div> <div>5.证书过期后只要保证公钥一致，就可以保证请求有效</div></td>
<td><div>1.使用自制证书的<div> <div>2.害怕攻击者拿到私钥或公钥文件，伪造证书（概率极低，因为需要CA机构再签发）<div> <div>3.证书过期需要更换，但是新旧证书公钥不同<div></div></div></div></div></div></div></td>
</tr>
<tr>
<td>6</td>
<td>PublicKey</td>
<td>YES</td>
<td>YES/NO</td>
<td><div>1.验证证书和埋入的证书公钥是否一致<div></div></div></td>
<td><div>1.使用自制证书 </div>  <div>2.需要本地APP中导入证书 </div>  <div>3.禁止第三方工具抓包 </div>  <div>4.不需要关心证书的有效期 </div></td>
<td><div>1.攻击者可以拿到私钥或公钥文件，伪造证书。相对于场景4和5，更容易攻击一些。 </div> <div> 2.攻击者可以用不在有效期的证书对进行攻击</div></td>
</tr>
<tr>
<td>7</td>
<td>Certificate</td>
<td>NO</td>
<td>YES</td>
<td><div>1.验证证书域名是否匹配</div><div>2.验证证书是否为信任的颁发机构颁发或是否为用户手动信任的证书</div><div>3.验证证书是否过期</div><div>4.验证证书和埋入的证书是否完全一致</div></td>
<td><div>1.证书是正规CA颁发的。</div><div>2.对安全有最高的需求</div><div>3.需要本地APP中导入证书</div><div>4.禁止第三方工具抓包</div></td>
<td><div>1.需要考虑证书更新的场景</div> <div>2.证书如果失效，客户端网络请求将会失效</div> <div>3.自制证书</div></td>
</tr>
<tr>
<td>8</td>
<td>Certificate</td>
<td>NO</td>
<td>NO</td>
<td><div>1.验证证书是否为信任的颁发机构颁发或是否为用户手动信任的证书</div><div>2.验证证书是否过期</div><div>3.验证证书和埋入的证书是否完全一致</div></td>
<td><div>1.证书是正规CA颁发的。</div><div>2.对安全有最高的需求</div><div>3.需要本地APP中导入证书</div><div>4.禁止第三方工具抓包</div><div>5.证书域名和实际域名不一致</div></td>
<td><div>1.需要考虑证书更新的场景</div><div>2.证书如果失效，客户端网络请求将会失效</div><div>3.自制证书</div><div>4.攻击者拿到公私钥的前提下，可以利用不校验域名，攻击或重定向其他域名。</div></td>
</tr>
<tr>
<td>9</td>
<td>Certificate</td>
<td>YES</td>
<td>YES</td>
<td><div>1.验证证书的域名是否匹配？</div> <div>2.验证证书是否过期？</div> <div>3.验证证书和埋入的证书是否完全一致</div></td>
<td><div>1.使用自制证书</div><div>2.需要本地APP中导入证书</div><div>3.禁止中间人攻击</div></td>
<td><div>1.需要考虑证书更新的场景</div><div>2.证书如果失效，客户端网络请求将会失效</div><div>3.无法作废不安全的证书。在攻击者拿到公私钥的前提下,可以监听数据。</div></td>
</tr>
<tr>
<td>10</td>
<td>Certificate</td>
<td>YES</td>
<td>NO</td>
<td><div>1.验证证书是否过期？</div><div>2.验证证书和埋入的证书是否完全一致</div></td>
<td><div>1.使用自制证书</div><div>2.需要本地APP中导入证书</div><div>3.禁止禁止中间人攻击</div></td>
<td><div>1.需要考虑证书更新的场景</div><div>2.证书如果失效，客户端网络请求将会失效</div><div>3.攻击者拿到公私钥的前提下，可以利用不校验域名，定位到其他域名。</div></td>
</tr>
</tbody>
</table>
<h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><p>下面是一些疑问：</p>
<ol>
<li><p>如何选择合适的方案?</p>
<blockquote>
<blockquote>
<ol>
<li>建议对安全没有特别要求的或在测试环境下方便抓包，采用默认规则就可以了，重要的数据单独做加密。即选场景1</li>
<li>要校验域名，即：validatesDomainName不要设置为NO。如果设为NO，不校验域名，也最好自己加一层验证方法。</li>
<li>如果是自制证书，allowInvalidCertificates设置为YES。如果是ca颁发的证书则建议设置为YES。</li>
<li>无论是使用AFSSLPinningModePublicKey还是AFSSLPinningModeCertificate都应该考虑证书失效需要更换的问题。</li>
<li>如果用AFSSLPinningModePublicKey方式，使用场景6只要<strong>保证后续更换的证书公钥不变化就可以了</strong>。个人觉得是安全和方便性最平衡的一种模式，只要私钥不泄露就可以了。这个要求公司的证书管理机构知道这点，不过如果出了意外，也可以延缓部署。</li>
<li>最安全的方案是7。也就是强校验，漏洞最少，安全防护最高。但是必须考虑证书失效更换的问题。</li>
</ol>
</blockquote>
</blockquote>
</li>
<li><p>如何防止证书过期导致不过的问题？</p>
<p>有以下方案：</p>
<blockquote>
<blockquote>
<ol>
<li>可以用场景6，<strong>保证后续更换的证书公钥不变化就可以了</strong></li>
<li>APP强制升级，全局通知，热更新等保护通道，建议不要使用强校验策略，使用强的加密手段保证安全，作为最后手段。</li>
<li>加入证书更新的通道，每次应用启动的时候访问，查看是否有证书更新，如果有就去下载证书。</li>
</ol>
</blockquote>
</blockquote>
</li>
<li><p>证书更新有什么方案？</p>
<blockquote>
<blockquote>
<ol>
<li>建议启动检查是否有证书更新，可以合并在检查APP更新或热更新里面。</li>
<li>发现有更新的时候，服务端把证书二进制数据转为16进制字符串下发给客户端。服务端对数据使用私钥签名，客户端使用公钥对数据进行验签。</li>
<li>客户端将下载的文件按照签名等规则保存。下次加载前，继续对文件验证签名，保证没有篡改。</li>
</ol>
</blockquote>
</blockquote>
</li>
<li><p>对于场景9，容许无效的证书，使用AFSSLPinningModeCertificate模式，为什么说明里面还说会验证证书过期？</p>
<blockquote>
<blockquote>
<p>我个人也不确定，但是这个模式在加入证书锚点后，代码里还是会调用<code>AFServerTrustIsValid()</code>方法，然后再匹配证书数据是否一致。这个<code>AFServerTrustIsValid()</code>最终调用的是系统验证的方法，不确定系统是否还是会验证有效期，还是只验证包含证书就可以了，目前没有手段验证，大概率认为系统还是会验证是否过期。所以相对来说验证AFSSLPinningModePublicKey需要考虑更新的情况更少。</p>
</blockquote>
</blockquote>
</li>
<li><p>如果使用AFSSLPinningModePublicKey模式，更换证书怎么保证公钥不变？</p>
<blockquote>
<blockquote>
<p>参考上一篇文章的附录，有一步是使用私钥<code>.key</code>文件生成<code>.csr</code>。只要<code>.key</code>和<code>.csr</code>，下次签发的时候直接用这两文件，签发就可以了。这样能保证下次的证书公钥也不变化。建议生产私钥的时候使用位数在2048位以上，可以保证安全性。</p>
</blockquote>
</blockquote>
</li>
</ol>
<h2 id="代码具体实现"><a href="#代码具体实现" class="headerlink" title="代码具体实现"></a>代码具体实现</h2><h3 id="导出证书"><a href="#导出证书" class="headerlink" title="导出证书"></a>导出证书</h3><p>建议向自己公司的网络管理员导出对应的crt文件。或者使用命令：</p>
<p><code>openssl s_client -connect www.google.com:443 &lt;/dev/null 2&gt;/dev/null | openssl x509 -outform DER &gt; https.cer  //获取www.google.com:443的ssl证书，地址可以换成自己的</code></p>
<p>建议最好导出根证书的crt文件。因为根证书crt文件有效期长，很少更换。</p>
<p>如果是crt格式，使用时需要转化为cer格式。两种转化方式都可以：</p>
<ol>
<li><p>命令行 <code>openssl x509 -in 你的证书.crt -out 你的证书.cer -outform der</code></p>
</li>
<li><p>通过电脑导出。</p>
<ul>
<li>双击crt，安装到钥匙链中。</li>
<li>钥匙链中选中需要导出的证书，鼠标右键，菜单中选择&gt;&gt;导出，点击存储即可。</li>
</ul>
</li>
</ol>
<p>然后将.cer文件导入到工程中。注意选<code>Copy items if needed</code> .</p>
<p><img src="/https-safe-2/safe_af_ssl.png" alt="safe_af_ss"></p>
<h3 id="设置生效规则"><a href="#设置生效规则" class="headerlink" title="设置生效规则"></a>设置生效规则</h3><p>代码实现其实非常简单，重要的是规则的设置，建议认真搞清楚上面讲的配置说明，然后再配置。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置模式</span></div><div class="line"> AFSecurityPolicy *policy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];</div><div class="line"> <span class="comment">//设置是否验证域名，不建议设置为NO</span></div><div class="line"> policy.validatesDomainName = <span class="literal">YES</span>;</div><div class="line"> <span class="comment">//设置是否容许无效的证书，自制证书选YES</span></div><div class="line"> policy.allowInvalidCertificates = <span class="literal">NO</span>;</div><div class="line"></div><div class="line"> </div><div class="line"> <span class="comment">//AF如果模式为AFSSLPinningModeCertificate或AFSSLPinningModePublicKey会默认导入mainBundle里的所有cer文件，如果没有特别需求，没必要实现下面加载cer的代码</span></div><div class="line"> <span class="comment">//先导入证书路径</span></div><div class="line"> <span class="built_in">NSString</span> *cerPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"myCer"</span> ofType:<span class="string">@"cer"</span>];<span class="comment">//证书的路径</span></div><div class="line"> <span class="comment">// 有多个加多个</span></div><div class="line"> <span class="built_in">NSData</span> *certData = [<span class="built_in">NSData</span> dataWithContentsOfFile:cerPath];</div><div class="line"> policy.pinnedCertificates = @[certData];</div><div class="line"></div><div class="line">  </div><div class="line"> AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class="line"> <span class="comment">//生效policy</span></div><div class="line"> manager.securityPolicy = policy;</div><div class="line"> </div><div class="line"> <span class="comment">//调用</span></div><div class="line"> <span class="built_in">NSString</span> *host = <span class="string">@"exmple"</span>;</div><div class="line"> <span class="built_in">NSDictionary</span> *params = @&#123;&#125;;</div><div class="line"> [manager GET:host</div><div class="line">   parameters:params</div><div class="line">      success:^(AFHTTPRequestOperation *_Nonnull operation, <span class="keyword">id</span> _Nonnull responseObject) &#123;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"> failure:^(AFHTTPRequestOperation *_Nonnull operation, <span class="built_in">NSError</span> *_Nonnull error)&#123;</div><div class="line">          _hasUpdating = <span class="literal">NO</span>;</div><div class="line"> &#125;];</div></pre></td></tr></table></figure>
<p>具体配置请参考上面AFSecurityPolicy的介绍。通常测试环境下使用默认模式，其他环境使用校验模式。</p>
<h2 id="验证策略源码解读"><a href="#验证策略源码解读" class="headerlink" title="验证策略源码解读"></a>验证策略源码解读</h2><p>AF 2.6版本，在系统框架需要进行证书验证的时候会调用AFURLCOnnectionOpeation.m中的<code>evaluateServerTrust:forDomain</code>方法： </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)evaluateServerTrust:(SecTrustRef)serverTrust</div><div class="line">                  forDomain:(<span class="built_in">NSString</span> *)domain</div><div class="line">&#123;</div><div class="line">    <span class="comment">//自制证书且验证域名不能用AFSSLPinningModeNone模式</span></div><div class="line">    <span class="keyword">if</span> (domain &amp;&amp; <span class="keyword">self</span>.allowInvalidCertificates &amp;&amp; <span class="keyword">self</span>.validatesDomainName &amp;&amp; (<span class="keyword">self</span>.SSLPinningMode == AFSSLPinningModeNone || [<span class="keyword">self</span>.pinnedCertificates count] == <span class="number">0</span>)) &#123;</div><div class="line">        <span class="comment">// https://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/NetworkingTopics/Articles/OverridingSSLChainValidationCorrectly.html</span></div><div class="line">        <span class="comment">//  According to the docs, you should only trust your provided certs for evaluation.</span></div><div class="line">        <span class="comment">//  Pinned certificates are added to the trust. Without pinned certificates,</span></div><div class="line">        <span class="comment">//  there is nothing to evaluate against.</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="comment">//  From Apple Docs:</span></div><div class="line">        <span class="comment">//          "Do not implicitly trust self-signed certificates as anchors (kSecTrustOptionImplicitAnchors).</span></div><div class="line">        <span class="comment">//           Instead, add your own (self-signed) CA certificate to the list of trusted anchors."</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"In order to validate a domain name for self signed certificates, you MUST use pinning."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">NSMutableArray</span> *policies = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.validatesDomainName) &#123;</div><div class="line">        <span class="comment">//如果要验证域名需要把域名加入到规则里</span></div><div class="line">        [policies addObject:(__bridge_transfer <span class="keyword">id</span>)SecPolicyCreateSSL(<span class="literal">true</span>, (__bridge <span class="built_in">CFStringRef</span>)domain)];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [policies addObject:(__bridge_transfer <span class="keyword">id</span>)SecPolicyCreateBasicX509()];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//设置验证规则，如果有域名验证就加入域名验证</span></div><div class="line">    SecTrustSetPolicies(serverTrust, (__bridge <span class="built_in">CFArrayRef</span>)policies);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.SSLPinningMode == AFSSLPinningModeNone) &#123;</div><div class="line">        <span class="comment">//AFSSLPinningModeNone下，如果容许无效证书或者证书通过验证就返回成功，否则返回失败</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.allowInvalidCertificates || AFServerTrustIsValid(serverTrust);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!AFServerTrustIsValid(serverTrust) &amp;&amp; !<span class="keyword">self</span>.allowInvalidCertificates) &#123;</div><div class="line">        <span class="comment">//其他模式，如果没有容许无效证书，就做证书验证，失效了就返回失败</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//抽取服务端的所有证书链数据</span></div><div class="line">    <span class="built_in">NSArray</span> *serverCertificates = AFCertificateTrustChainForServerTrust(serverTrust);</div><div class="line">    <span class="keyword">switch</span> (<span class="keyword">self</span>.SSLPinningMode) &#123;</div><div class="line">            <span class="comment">//不会进入到这个case</span></div><div class="line">        <span class="keyword">case</span> AFSSLPinningModeNone:</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">        <span class="keyword">case</span> AFSSLPinningModeCertificate: &#123;</div><div class="line">            </div><div class="line">            <span class="comment">//将导入的证书加入到锚点里</span></div><div class="line">            <span class="built_in">NSMutableArray</span> *pinnedCertificates = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">NSData</span> *certificateData <span class="keyword">in</span> <span class="keyword">self</span>.pinnedCertificates) &#123;</div><div class="line">                [pinnedCertificates addObject:(__bridge_transfer <span class="keyword">id</span>)SecCertificateCreateWithData(<span class="literal">NULL</span>, (__bridge <span class="built_in">CFDataRef</span>)certificateData)];</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">// PS:查看相关文档发现，如果只调用了SecTrustSetAnchorCertificates而没有调用SecTrustSetAnchorCertificatesOnly(serverTrust,false)方法，会导致只信任SecTrustSetAnchorCertificatesOnly设置的锚点的证书，不信任系统默认内置的锚点证书</span></div><div class="line">            SecTrustSetAnchorCertificates(serverTrust, (__bridge <span class="built_in">CFArrayRef</span>)pinnedCertificates);</div><div class="line"></div><div class="line">            <span class="comment">//验证是否证书是否在加入的锚点证书列表里。猜测会验证证书的有效期，如果有域名验证，验证域名。</span></div><div class="line">            <span class="keyword">if</span> (!AFServerTrustIsValid(serverTrust)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//查看证书链中的证书是否和埋入的证书完全一致。</span></div><div class="line">            <span class="built_in">NSUInteger</span> trustedCertificateCount = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">NSData</span> *trustChainCertificate <span class="keyword">in</span> serverCertificates) &#123;</div><div class="line">                <span class="keyword">if</span> ([<span class="keyword">self</span>.pinnedCertificates containsObject:trustChainCertificate]) &#123;</div><div class="line">                    trustedCertificateCount++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> trustedCertificateCount &gt; <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> AFSSLPinningModePublicKey: &#123;</div><div class="line">            <span class="built_in">NSUInteger</span> trustedPublicKeyCount = <span class="number">0</span>;</div><div class="line">            <span class="comment">//从证书链中抽取所有公钥列表</span></div><div class="line">            <span class="built_in">NSArray</span> *publicKeys = AFPublicKeyTrustChainForServerTrust(serverTrust);</div><div class="line">            <span class="comment">//验证证书链中的公钥是否在导入的证书里面的公钥链中</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">id</span> trustChainPublicKey <span class="keyword">in</span> publicKeys) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">id</span> pinnedPublicKey <span class="keyword">in</span> <span class="keyword">self</span>.pinnedPublicKeys) &#123;</div><div class="line">                    <span class="keyword">if</span> (AFSecKeyIsEqualToKey((__bridge SecKeyRef)trustChainPublicKey, (__bridge SecKeyRef)pinnedPublicKey)) &#123;</div><div class="line">                        trustedPublicKeyCount += <span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> trustedPublicKeyCount &gt; <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>里面实际验证是否有效的方法为：<code>AFServerTrustIsValid(SecTrustRef serverTrust)</code>。实现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">BOOL</span> AFServerTrustIsValid(SecTrustRef serverTrust) &#123;</div><div class="line">    <span class="built_in">BOOL</span> isValid = <span class="literal">NO</span>;</div><div class="line">    SecTrustResultType result;</div><div class="line">    <span class="comment">// 具体实现，因为看不到源码无法确认，应该是标准的证书链验证方式，验证证书有效性，验证证书链的对应的CA根证书是否在颁发机构里或者是否是用户手动同意或拒绝的证书。如果设置了SecTrustSetAnchorCertificates,则验证是否在SecTrustSetAnchorCertificates方法设置的锚点证书里（不包含系统的证书）</span></div><div class="line">    __Require_noErr_Quiet(SecTrustEvaluate(serverTrust, &amp;result), _<span class="keyword">out</span>);</div><div class="line"></div><div class="line">    <span class="comment">//kSecTrustResultUnspecified:证书通过验证，但用户没有设置这些证书是否被信任</span></div><div class="line">    <span class="comment">//kSecTrustResultProceed:证书通过验证，用户有操作设置了证书被信任，例如在弹出的是否信任的alert框中选择always trust</span></div><div class="line">    isValid = (result == kSecTrustResultUnspecified || result == kSecTrustResultProceed);</div><div class="line"></div><div class="line">_<span class="keyword">out</span>:</div><div class="line">    <span class="keyword">return</span> isValid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="WebView进行证书验证"><a href="#WebView进行证书验证" class="headerlink" title="WebView进行证书验证"></a>WebView进行证书验证</h1><p>如果不配置，webview执行系统默认的策略。因为项目中没用到，暂时不敢评判，下面是相关<a href="http://www.cnblogs.com/lijizhuang/p/4884868.html" target="_blank" rel="external">博客</a>供参考。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="http://www.jianshu.com/p/36ddc5b009a7" target="_blank" rel="external">iOS 10 适配 ATS（app支持https通过App Store审核）</a></li>
<li>[ATS 官方文档] (<a href="https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW35" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW35</a>)</li>
<li><a href="https://www.zhihu.com/question/25912483" target="_blank" rel="external">RSA的公钥和私钥到底哪个才是用来加密和哪个用来解密?</a></li>
<li><a href="http://oncenote.com/2015/09/16/Security-2-HTTPS2/" target="_blank" rel="external">iOS安全系列之二：HTTPS进阶</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;导读&lt;/p&gt;
&lt;p&gt;本文主要讲解IOS中ATS相关的配置说明和使用AFNetworking框架来实现证书验证的方法。讲解了AFNetworking各个配置试用的场景和注意点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://dishibolei.github.io/categories/iOS/"/>
    
      <category term="安全" scheme="https://dishibolei.github.io/categories/iOS/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="iOS" scheme="https://dishibolei.github.io/tags/iOS/"/>
    
      <category term="安全" scheme="https://dishibolei.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="ATS" scheme="https://dishibolei.github.io/tags/ATS/"/>
    
      <category term="AFNetworking" scheme="https://dishibolei.github.io/tags/AFNetworking/"/>
    
      <category term="HTTPS" scheme="https://dishibolei.github.io/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>IOS应用安全-HTTP/HTTPS网络安全(一)</title>
    <link href="https://dishibolei.github.io/2017/05/11/https-safe-1/"/>
    <id>https://dishibolei.github.io/2017/05/11/https-safe-1/</id>
    <published>2017-05-11T07:21:51.000Z</published>
    <updated>2017-05-19T03:25:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>导读：</p>
<p>本文主要讲在HTTP和HTTPS实际开发中有用和有意思的地方，希望读者能够有所启发。</p>
<p>主要包括：HTTP和HTTPS的简单介绍。介绍HTTPS加密逻辑。介绍SSL证书和SSL证书校验的规则。</p>
<p>本文简化了相关的技术细节，主要关注于前端开发需要关注的点和可以借鉴的地方，希望能对开发能有所帮助。开发更关心的技术代码实现细节，会单独文章中说明。</p>
</blockquote>
<a id="more"></a>
<h1 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h1><p>具体细节可以参考后面的参考文献，只写我觉得有意思和实际中可以参考的地方。</p>
<ol>
<li><p>HTTP协议构建于TCP之上。意味着http是可靠的数据传输。所以不用担心丢包和乱序的问题。</p>
</li>
<li><p>HTTP协议是基于请求和响应的协议。与之对比MQTT协议是基于订阅的协议。</p>
<p> 比如我想要一个资源的种子，如果知道哪个老司机有，我直接问他，他有就给我，没有也告诉我没有。这种模式就是请求和响应，好处是一对一，可以<strong>准确完整的按照自己的需求拿到需要的数据</strong>，但是坏处是消息会滞后，我想知道老司机后面是不是有资源了，我就只能一遍遍重复的问，直到拿到想要的结果为止（循环延迟请求，之前专门写个looperRequest就是为了解决这种问题）。</p>
<p> 另外一种方案，我发布消息到一个论坛，然后留下邮箱，求好人一生平安。然后很多好人有资源就发给我，这样也能拿到数据。这种模式就是订阅模式，好处是可以一对多，可以<strong>快速实时拿到数据</strong>。但是<strong>坏处是：需要长链接</strong>，且推送消息时不清楚客户端的状态，推送的东西不一定需要，比如这个种子可能我已经有了，再发给我就浪费大家的流量了。</p>
<p> 总结下。利用请求应答的模式，可以快速的和服务端同步数据，保证当前请求数据的有效性，有时候我们也叫拉（pull）数据。订阅模块可以快速的更新需要保证实时性的数据，比如聊天数据，交易结果，账户异常，有时候我们也叫推送（push）数据。</p>
<p> 这两种方案是和服务端常用的两种交互方案，有些交互可以考虑两者结合的方式解决。比如之前项目中解决聊天数据的实时有效性，就采用后端推送当前有新消息或其他状态信息，前端收到状态信息后，主动拉取消息到本地，既能保证能够快速更新消息或状态，又能通过本地的状态，按照需求拉取需要的消息。</p>
<p> 推/拉这种设计思路也可以用于应用间的数据同步，应用于模块间数据通信来进行模块解耦等。现在的项目工程模块化设计方案也借鉴了这两种思想。</p>
</li>
<li><p>URL。URL定义了一个资源的地址。大部分格式如下</p>
<p> <code>protocol :// hostname[:port] / abs_path / [;parameters][?query]#fragment</code></p>
<p> 详细说明<a href="http://baike.baidu.com/link?url=9uGFzaUuMRGf4Nn-ucSUqrSYI4vwDls4jVrxZ_7iHZqCnp7FJJTW1ZGp8lzyJ28m9uweSaN6CREycgIObuspD7UQeq1_WlQjnbEzvpjBBK7" target="_blank" rel="external">参考</a></p>
<p> 其中query用“&amp;”符号隔开，每个参数的名和值用“=”符号隔开。例如：<code>http://www.joes.com/inventory-check.cgi?item=12731&amp;color=blue</code>。唯一需要注意的是，URL里面不容许有非ASCII字符（常见的就是汉字），也不容许有保留字符比如：<code>!*&#39;\&quot;();:@&amp;=+$,/?%#[]%</code>,所以通常拼接请求时（GET），需要对传进来的参数做<strong>一次URLEncode</strong>操作。</p>
<p> <strong>可以参考这个做私有协议跳转，比如push消息协议，模块跳转协议，外部跳转协议等。</strong></p>
</li>
</ol>
<ol>
<li><p>http请求由三部分组成，分别是：请求行、消息报头、请求正文.详细的建议使用charles抓一个请求看下就知道了。</p>
<p><img src="https://github.com/dishibolei/img/raw/master/safe/http/safe_http_header_struct.png" alt=""> </p>
<p>注：来源于<a href="http://www.cnblogs.com/ranyonsue/p/5984001.html" target="_blank" rel="external">http://www.cnblogs.com/ranyonsue/p/5984001.html</a>.</p>
<p><img src="https://github.com/dishibolei/img/raw/master/safe/http/safe_http_header1.png" alt=""></p>
<p>重要的几个请求报头字段：</p>
<ul>
<li>Accept: 指定客户端接受的消息类型（通常没人使用,因为客户端大量使用json做数据解析）</li>
<li>Host:请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的</li>
<li>User-Agent:用于附加操作系统名称和浏览器版本，通常给H5使用的，UA很容易被修改，项目中有遇到修改UA导致H5页面识别不出来当前操作系统和版本的问题，遇到这种可以查下UA被谁篡改了。</li>
<li>Referer:用于标示请求来源，一般用于防盗链，这个实际中也遇到过。</li>
</ul>
</li>
<li><p>http的响应一般由三个部分组成，分别是:状态行，消息报头，响应正文。</p>
<p> <img src="https://github.com/dishibolei/img/raw/master/safe/http/safe_http_response_struct.jpg" alt=""><br> 注：来源于<a href="http://www.cnblogs.com/ranyonsue/p/5984001.html" target="_blank" rel="external">http://www.cnblogs.com/ranyonsue/p/5984001.html</a>.</p>
<p> 重要的几个消息报头</p>
<ul>
<li>Content-Type 正文媒体类型和编码格式，比如：<code>Content-Type:text/html;charset=ISO-8859-1</code>.Content-Type这个字段被AFNetworking框架用于决定用什么解析器，注意后端不要配置错了。charset被用于AFNetworking字符解码，也应该前后端配置正确。这个配置不正确是经常联调不过的原因。 具体实现参考<code>AFURLResonseSerialization.m</code>。</li>
<li>Content-Length 用于表示正文长度，下载长资源时，需要使用这个字段来计算进度，也可以用这个字段推算下载流量。</li>
<li>Content-Encoding 通常用于记录压缩方法，比如：<code>gzip</code>。</li>
</ul>
</li>
<li><p>GET和POST的方法。HTTP有定义了几种常用的方法，不过通常前端只和这两个打交道。这两个区别：</p>
<ul>
<li>通常认为get是获取消息，不改变数据，post是用来改变数据，不过实际中，并不是那么明确。</li>
<li>get参数是附在URL链接上的，参数拼接前需要做URLEncode，post是附在请求正文里的,格式为key=value，使用&amp;分割，所以对传入数据也要做URLEncode，拼接后和头部用回车换行隔开。</li>
<li>get的URL长度有一定限制，不过也取决于系统支持，具体长度需要实际调研，ie的限制为2083字节，post理论上不存在长度限制。</li>
<li>安全性，post相对安全，get相对不安全。不过post属于防君子不防小人的那种，实际没有什么安全可言。<br>所以综合来说，如果没有技术洁癖，建议都用post处理。</li>
</ul>
</li>
<li><p>上传图片等二进制资源。上传资源一般是post协议，但是通常post是用于传送文本的，如何传图片等资源呢？就需要<code>multipart</code>协议了。</p>
<p> mutipart和普通的post有两点不同：请求头，请求报文。其中关键字是<code>boundary</code>这个属性。</p>
<ul>
<li>请求头： 必须包含<code>content-Type</code>，且值为：<code>multipart/form-data;boundary=${bond}</code>,其中${bound}为具体分割符，在AFNetworking中，如果不指定是<code>Boundary+${random}</code>。</li>
<li>请求体:内容不再是用name=value的形式，而是使用上面的boundary进行分割的一段一段的结构体。具体示例：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">   </div><div class="line">POST /btoa/work/common/uploadImage HTTP/<span class="number">1.1</span></div><div class="line">Host: www.example.com</div><div class="line">Content-Type: multipart/form-data; boundary=Boundary+<span class="number">49</span>F77F66A65EEA58</div><div class="line">Cookie: BIGipServerPOOL_PACLOUD_STGR2016080900646=<span class="number">1274288556.52384</span><span class="number">.0000</span>; FF_SESSION2_ID=Sf503bee3691b4a31a53c6e3c5ae1c1f00912e8</div><div class="line">Connection: keep-alive</div><div class="line">Accept: *<span class="comment">/*</span></div><div class="line">User-Agent: FFProject/2.0.0 (iPhone; iOS 10.3.1; Scale/3.00)</div><div class="line">Accept-Language: zh-Hans-CN;q=1, th-TH;q=0.9</div><div class="line">Content-Length: 418864</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line"></div><div class="line">--Boundary+49F77F66A65EEA58</div><div class="line">Content-Disposition: form-data; name="ffAppID"</div><div class="line"></div><div class="line">10004</div><div class="line">--Boundary+49F77F66A65EEA58</div><div class="line">Content-Disposition: form-data; name="imageSeq"</div><div class="line"></div><div class="line">1</div><div class="line">--Boundary+49F77F66A65EEA58</div><div class="line">Content-Disposition: form-data; name="imageType"</div><div class="line"></div><div class="line">5</div><div class="line">--Boundary+49F77F66A65EEA58</div><div class="line">Content-Disposition: form-data; name="image"; filename="xxxx.jpg"</div><div class="line">Content-Type: image/jpeg</div><div class="line"></div><div class="line">***image hex data***</div><div class="line"></div><div class="line">--Boundary+49F77F66A65EEA58--</div></pre></td></tr></table></figure>
<p>看到上面的例子可以知道，有几个参数是必须的，name、filename、Content-Type、具体资源数据 ，对应的AF接口：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)appendPartWithFileData:(<span class="built_in">NSData</span> *)data</div><div class="line">                    name:(<span class="built_in">NSString</span> *)name</div><div class="line">                fileName:(<span class="built_in">NSString</span> *)fileName</div><div class="line">                mimeType:(<span class="built_in">NSString</span> *)mimeType;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="HTTPS简介"><a href="#HTTPS简介" class="headerlink" title="HTTPS简介"></a>HTTPS简介</h1><p>苹果ATS政策出来之前，后端极少使用HTTPS协议，而是使用HTTP协议+自定义的安全数据加密策略来保证安全性。这是因为虽然HTTPS更安全，但是也更加耗费性能。如今苹果强推HTTPS（有说法是苹果可能会全面禁止HTTP的使用），使得HTTPS大范围使用，并且使用HTTPS作为安全扫描项，被安全机构接纳。但是如果不正确的使用HTTPS，还是会带来安全风险。</p>
<h2 id="SSL-TLS简介"><a href="#SSL-TLS简介" class="headerlink" title="SSL/TLS简介"></a>SSL/TLS简介</h2><p>HTTPS的关键字就是SSL（TLS）。和HTTP唯一的不同就是加入了SSL（TLS）协议，这一层在TCP之上，负责保证安全连接和数据传输安全。</p>
<p><img src="https://github.com/dishibolei/img/raw/master/safe/http/safe_https_protocol.png" alt=""></p>
<p>注：来自 <a href="https://www.zybuluo.com/qidiandasheng/note/713956" target="_blank" rel="external">深入解析HTTPS</a> </p>
<p>SSL实际上是一套加密通信机制。SSL和TLS两者的协议基本一致，区别简单可以理解是TLS是SSL的升级版本。<strong>但是使用SSL所有协议版本都不再安全。请勿使用SSL协议</strong> 具体可以参考<a href="http://kb.cnblogs.com/page/197396/" target="_blank" rel="external">SSL与TLS的区别以及介绍</a></p>
<p>ios加入了ATS限制，强制原来HTTP必须使用HTTPS传输，也强制要求服务器必须使用TLS v1.2版本以上。所以简化为：</p>
<p><strong>要使用支持TLS1.2及以上协议的HTTPS传输数据</strong></p>
<p>PS：后面如无特殊说明，不再区分TLS和SSL，统一称为SSL</p>
<h2 id="HTTPS原理"><a href="#HTTPS原理" class="headerlink" title="HTTPS原理"></a>HTTPS原理</h2><p>建议看下<a href="http://blog.csdn.net/muzhengjun/article/details/53379593" target="_blank" rel="external">浅析HTTPS中间人攻击与证书校验</a>和<a href="http://www.open-open.com/lib/view/open1411260089562.html" target="_blank" rel="external">阮一峰：图解SSL/TLS协议</a>和<a href="http://www.cnblogs.com/LittleHann/p/3733469.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">SSL、TLS协议格式入门学习 - .Little Hann</a></p>
<p>下面是协议流程图：</p>
<p><img src="https://github.com/dishibolei/img/raw/master/safe/http/safe_https_message.jpg" alt=""></p>
<p>注：来自<a href="http://blog.csdn.net/muzhengjun/article/details/53379593" target="_blank" rel="external">http://blog.csdn.net/muzhengjun/article/details/53379593</a></p>
<p>简单描述：</p>
<ol>
<li>TCP握手</li>
<li>SSL握手，握手成功就开始传输，失败就断开链接</li>
<li>数据传输</li>
</ol>
<p>下面也是只讲一些有意思的点和注意的地方。</p>
<h3 id="HTTPS加密流程"><a href="#HTTPS加密流程" class="headerlink" title="HTTPS加密流程"></a>HTTPS加密流程</h3><p>整个加密的流程，体现了一个非常安全的信息加密的方案。 简化的流程如下：</p>
<ol>
<li>客户发送一个随机数给服务端：random-c（明文）</li>
<li>服务端发送自己SSL证书给客户端。发送服务端随机数：random-s（明文）</li>
<li><strong>客户端验证SSL证书有效性，如果判定有效，生成一个随机数random-p,然后使用证书中的公钥进行非对称加密，发送给服务端。</strong> （这一步是整个安全环节最重要也是最薄弱的环节）</li>
<li>服务端拿到加密后的秘钥，通过私钥解密，得到random-p ，将random-c、random-s、random-p三个随机数做因子，两端都按照一定算法生成会话对称秘钥secret_key。</li>
<li>客户端计算之前的握手消息（除了Change Cipher Spec外）的Hash值，利用secret_key做对称加密后发给服务端。</li>
<li>服务端拿到后，利用secret_key解密，然后利用同样的算法计算之前的握手消息的Hash值，如果能解密成功，且验证Hash值正确则说明客户端的加密算法和秘钥没问题。</li>
<li>服务端再计算之前的握手消息的Hash值，利用secret_key做对称加密后发给客户端，客户端如果能够解密出来，且与自己计算的Hash值相同，则最后链接正式建立成功。</li>
</ol>
<p>注明：上面是以RSA为基础的秘钥加密流程，即需要客户端将随机数加密传输给后端。还有一种基于秘钥交换的形式，双方的对称秘钥是通过交换的参数本地的，不会通过信道传输，会更安全些。具体参考<a href="http://www.open-open.com/lib/view/open1477548899809.html" target="_blank" rel="external">TLS/SSL 高级进阶</a></p>
<p>先简单说明几个概念，详细的会专门抽出来分享：</p>
<ol>
<li>对称加密：双方使用的秘钥是相同的，使用同一个秘钥进行加解密。</li>
<li>非对称加密：加密使用公钥加密，解密使用私钥加密。或者私钥加密，使用公钥解密。但是公钥和私钥是不同的。公钥是公开的，可以被第三方拿到而不会引起任何安全问题，因为通过公钥是无法得到私钥的，因而没办法解密使用公钥加密的数据。</li>
<li>散列（hash）：散列变换是指把文件内容通过某种公开的算法，变成固定长度的值（散列值），这个过程可以使用密钥也可以不使用。这种散列变换是不可逆的，也就是说不能从散列值变成原文。好的散列算法是一对一的，不同的原文生成的一定是不同的散列。</li>
</ol>
<p>这其中使用的加密策略：</p>
<ol>
<li>传输数据应该加密，整个加密过程使用了两种加密方案，一种对称加密，一种非对称加密。</li>
<li>传输数据使用了对称加密，而秘钥生成中使用了非对称加密。</li>
<li>使用了散列算法（hash）来做数据验证。</li>
</ol>
<p>回答这里面常见的几个问题：</p>
<ol>
<li><p>为什么又要用非对称加密，又要用对称加密，只使用一个不可以么？</p>
<blockquote>
<blockquote>
<p>不能只是用对称加密，因为对称加密，两个使用的秘钥是一致的，有一端的秘钥泄露了，两端的通信就不再安全了，尤其是客户端的对称秘钥非常容易泄露，拿到秘钥后，整个系统就不安全了。</p>
<p>也不只用非对称加密，主要是因为性能，非对称加密相对于对称加密，计算时间要长非常多，对于性能要求很高的场景，会明显降低性能。<a href="http://blog.csdn.net/yore_/article/details/52733994" target="_blank" rel="external">RSA算法和AES算法性能测试</a></p>
<p>所以设计者结合了两种方案。两端通过非对称加密协商秘钥，攻击者因为拿不到私钥，是无法解开通信秘钥的。一旦协商成功，通过对称加密又解决了性能问题。</p>
</blockquote>
</blockquote>
</li>
<li><p>为什么使用三个随机数</p>
<blockquote>
<blockquote>
<p>还是为了进一步加强安全，客户端或者服务端生成的随机数可能是伪随机的，有可能被攻击者猜出，但是如果三个伪随机的数一起使用就大大加强了随机性，这样攻击者就很难破解了。</p>
</blockquote>
</blockquote>
</li>
<li><p>为什么最后要做hash验证</p>
<blockquote>
<blockquote>
<p>为了保证两端通信中的数据不会做篡改，由于HASH算法，可以保证唯一性，所以如果中间消息被人篡改，就可以断开链接。</p>
</blockquote>
</blockquote>
</li>
</ol>
<p><strong>如果对原理不感兴趣，那建议记住下面推荐的加密方案</strong>，完全可以解决大部分的加密需求：</p>
<ol>
<li>使用随机数做对称加密秘钥，将对称加密秘钥使用公钥进行非对称加密传给后端。这样因为秘钥随机，所以即使客户端被破解，也拿不到任何对称秘钥。而公钥建议老客户过3456让她进行动态获取，避免私钥泄露带来的问题。</li>
<li>使用非对称加密秘钥，可以保证网络数据即使劫持，因为没有私钥，也解不出来对应的加密秘钥，所以加密的隐私数据也是安全的</li>
<li>两者结合，可以保证一定的性能要求。</li>
<li>对数据进行加签（加盐+hash算法），保证中间的数据不会篡改。</li>
</ol>
<p>ps:用户的密码，因为保密性要求更高。建议的算法是做HMAC哈希做脱敏，然后使用非对称加密给后端。</p>
<h1 id="常用的网络传输攻击手段"><a href="#常用的网络传输攻击手段" class="headerlink" title="常用的网络传输攻击手段"></a>常用的网络传输攻击手段</h1><p>先思考下，刚才的通信链路有三个参与者：</p>
<ol>
<li>客户端</li>
<li>传输信道</li>
<li>服务端</li>
</ol>
<p>如果新加入一个攻击者，他想要窃取用户的隐私数据，他该怎么做？常见的做法：</p>
<ol>
<li>攻击客户端。对于IOS系统来说，非越狱手机，由于权限问题，几乎无法攻击（之前<a href="https://www.baidu.com/link?url=gtxpH2omxSt5NpX-5RmuUYCFmWA-C49q7fQPWnJMO7wtUCpSIXTuEoYZ4B94QDc9Po6lrX7SzKvtEMH8R46XGfGKtnx42FxROp5zbVZ6Irm&amp;wd=&amp;eqid=aa656a8100001a250000000659127d0b" target="_blank" rel="external">XcodeGhost</a>真的是很nb的攻击思路）。对于越狱手机，通过HOOK API，然后重新打包应用，诱导用户下载。或者劫持系统的输入框等常用控件可以达到攻击目的。相关的以后整理输出。但是从移动APP来说，直接攻击APP带来的危害和利用性很低，通常只会泄露很少的用户信息。大多是利用来薅羊毛的。</li>
<li>攻击传输信道。攻击手段有中间人攻击，DNS劫持等。</li>
<li>攻击服务端。也非常难做到。一般是模板注入，撞库等。</li>
</ol>
<p>这里面其实最容易的就是攻击传输信道。排除技术术语，手段有：</p>
<ol>
<li>伪装成正常的客户端攻击服务端</li>
<li>伪装成正常的服务端，劫持客户端数据</li>
<li>监听修改信道数据</li>
</ol>
<p>这几种怎么解决？</p>
<p>问：如何处理伪装成正常的客户端攻击服务端</p>
<blockquote>
<p>在认为客户端app本身是无法攻破的前提下：</p>
<ol>
<li>请求中一定加入签名策略。攻击者不知道签名策略是无法仿造请求的，也防止劫持者修改。发现签名不对，服务端认为是假的客户端。</li>
<li>请求中一定加入请求防重放策略。服务端发现是之前的请求，重复发送过来的（可能只有签名不一致），应该忽略</li>
<li>加入风险控制策略。比如异地登陆，同一设备ip反复请求，一些金融类app也会加入公安部认证的风控系统，防止一些有金融犯罪前科的用户注册。后端使用风控策略，禁止用户登录，或者强制要求用户再次身份认证，比如手机验证码认证。</li>
</ol>
</blockquote>
<p>问：如何处理监听修改信道数据<br>&gt;</p>
<blockquote>
<ol>
<li>请求关键数据做加密，加密方案建议使用上面提到的加密方案。这样即使被监听，拿到数据也无法处理</li>
<li>加入请求签名，防止数据篡改。</li>
</ol>
</blockquote>
<p>问：如何处理伪装成正常的服务端，劫持客户端数据</p>
<blockquote>
<p>这一种方式是目前攻击最常见且有效的手段。使用http的时候，因为没有任何认证措施，通过ARP或者DNS劫持，非常容易将网址定向到其他攻击者的地址，攻击者可以做劫持和修改相关数据。所以HTTP现在已经被各大平台所抛弃。很多开发遇到的访问一个h5页面，被运营商强插入广告就是这么做的。解决办法就是正确的使用HTTPS</p>
</blockquote>
<p>HTTPS，很大一部分作用就是解决上述问题。也就是通过SSL握手，校验服务端证书，达到验证是否是伪装的服务端的目的。HTTPS握手阶段算法原理都是安全的，只有验证身份这一步有漏洞，即只要想办法让客户端认为证书是可信的，证书里面的公钥就是生成者的公钥，自然就有相对应的私钥，后面非对称加密生成的对称秘钥就可以被截取到，造成整个链路不安全。如何攻击这个策略，行业上主要称为<strong>中间人攻击</strong>。</p>
<h1 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h1><p>可以说<strong>验证SSL证书是整个HTTPS的关键</strong>，如果这一步出问题，后面的就没有任何安全可言。而对于我们前端开发来说，SSL证书也是最需要关注的地方。</p>
<p>这里讲两个问题。SSL证书是什么？为什么通过SSL证书可以防止攻击者伪装成服务端。</p>
<h2 id="SSL证书是什么"><a href="#SSL证书是什么" class="headerlink" title="SSL证书是什么"></a>SSL证书是什么</h2><p>SSL证书是一个文件。里面的内容包括：用户的信息、用户的公钥、还有CA中心对该证书里面的信息的签名。<br>一个证书的实例：</p>
<p>打开safari，打开百度，<code>https://www.baidu.com</code>,在地址栏点击锁按钮，然后选显示证书。</p>
<p><img src="https://github.com/dishibolei/img/raw/master/safe/http/safe_https_cer.png" alt=""></p>
<p>里面的内容只有几个需要关注的：</p>
<ol>
<li>常用名称：<code>baidu.com</code> 。客户端或浏览器，根据常用名称和访问的域名做匹配，访问的域名和证书的域名不一致，就会拒绝访问，达到<strong>防止域名劫持的目的</strong>。这个信息可以被伪造。</li>
<li>公共密钥：SSL握手生成的第二段随机串是通过这个公钥来加密的。这个信息可以被伪造，但是伪造没有异议。（想知道为啥的可以看看证书生成的步骤。）</li>
<li>签名：是对整个证书内容做hash之后，使用颁发机构的<strong>私钥</strong>加密的值。这个信息可以被伪造，但是伪造没有异议。</li>
<li>签名者信息：颁发机构的信息，由于验证上一级的证书信息。这个信息可以被伪造。</li>
<li>证书有效期。这个信息可以被伪造。</li>
</ol>
<p>可以看到在百度这个证书上面还有两个证书，这是因为百度这个证书是有GS这个机构的二级机构颁发的，而GS这个二级机构是由GS的CA根证书颁发的。</p>
<p>也就是证书有证书链的概念，即这个证书可能是上一层机构颁发的，从CA根证书开始-&gt;二级CA证书-&gt;三级CA证书-&gt;…。</p>
<p><img src="https://github.com/dishibolei/img/raw/master/safe/http/safe_http_ssl_chain.png" alt=""></p>
<p>注：来自<a href="http://blog.csdn.net/shen_guo/article/details/49891459" target="_blank" rel="external">SSL 之证书链</a></p>
<h2 id="SSL证书如何验证的"><a href="#SSL证书如何验证的" class="headerlink" title="SSL证书如何验证的"></a>SSL证书如何验证的</h2><p>推荐这篇文章，是目前看到讲的最清楚。<a href="http://www.2cto.com/article/201607/523509.html" target="_blank" rel="external">浅析HTTPS中间人攻击与证书校验</a></p>
<p>根据HTTPS协议，服务端会在握手的时候将证书传送给客户单，<strong>而且是将整个证书链发过来</strong>。</p>
<p>通常的验证传过来的证书是否有效的步骤为：</p>
<ol>
<li>验证证书的常用名称是否是访问的域名，是否在有效期内。（域名校验+有效期校验）</li>
<li>计算这个证书内容的散列值得到MD5-a，然后用颁发机构的公钥解密这个证书的签名得到MD5-b，比较两个值是否相同，如果相同说明这个证书确实是上个颁发机构颁发的。</li>
<li>重复上面的操作，直到验证到CA根证书。CA证书是自签名的，也就是签名是用自己的私钥签名的。<br>可是CA根证书签名是用自己的私钥做签名，怎么去验证这个证书是否正确呢？</li>
</ol>
<p>最终上面的问题简化为：</p>
<h2 id="如何验证CA根证书有效性"><a href="#如何验证CA根证书有效性" class="headerlink" title="如何验证CA根证书有效性"></a>如何验证CA根证书有效性</h2><p>最终层层拨茧，HTTPS的安全性关键钥匙就在这一章了。</p>
<p>CA根证书有两种生成方式：</p>
<ol>
<li>由可信的颁发机构颁发</li>
<li>本地自己生成</li>
</ol>
<p>对于第一种，因为可信的颁发机构很少，这些机构的CA证书会默认保存在浏览器里或者手机操作系统里，由可信的机构颁发的证书的有效性会由颁发机构保证。不过这种证书需要向颁发机构申请，颁发机构会花时间去进行公司域名身份等信息验证，所以花费也不少。</p>
<p>对于第二种，本地生成的证书（后面会附录如何生成自签名证书），证书常用的信息都可以生成，可以认为证书信息内容都不可靠，尤其是证书中的域名。使用自制证书在浏览器会弹出警告不可信，用户可以手动添加到信任列表里，之后可信了才可以访问，12306之前让下载证书导入，就是这个原因。在应用APP里，如果使用默认配置，会拒绝，返回SSL验证失败。</p>
<p>在应用内信任自生成证书有两种办法：</p>
<p>第一种</p>
<blockquote>
<p>安装描述文件到系统里。在安装charles过程中，其中一步就是打开一个网址，在弹出安装的时候，安装这个证书，也可以把这个证书下载到云盘里，然后打开。这个过程需要用户手动授权。这个起效后是全局的，任何应用都会影响。</p>
</blockquote>
<p>第二种</p>
<blockquote>
<p>把这个根证书，埋入APP里,然后设置为证书锚点（可以设置多个），然后在SSL握手需要验证证书的时候，系统会认为这个证书是有效的。这个方案也是很多自签名证书进行校验的方法。这个只会在本应用里起作用。</p>
</blockquote>
<h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>中间人攻击是最常见的攻击HTTPS手段。</p>
<p>建议看这篇文章：<a href="http://oncenote.com/2015/09/16/Security-2-HTTPS2/" target="_blank" rel="external">iOS安全系列之二：HTTPS进阶</a></p>
<p>看到上面的验证手段，其实关键就在于如何信任CA根证书上面。攻击者就是想尽一切办法让客户端安装他自己的CA证书到你的手机里。</p>
<p>如果手机没有越狱，一定会引诱你去安装这个证书，并且手动设为可信。一旦信任，在访问服务器的时候，攻击者通过代理劫持，通过这个信任的CA证书，生成对应的域名的证书。最终因为<strong>域名可信，有效期可信，证书可信</strong>整个HTTPS建立成功，攻击者拿到相关的数据。</p>
<p>使用charles抓包的整个过程，其实就是中间人攻击的过程。</p>
<p>附：下面是charles开启SSL代理后，访问新浪弹出的证书信息，可以看到charles生成了新浪域名的证书：</p>
<p><img src="https://github.com/dishibolei/img/raw/master/safe/http/safe_https_fake.png" alt=""></p>
<p>提示：<strong>对于用户来说，不要信任任何CA证书，不安装任何描述文件是最安全的方法。</strong>比如安装飙车软件，让你信任一个证书。比如链接外部wifi，提示你安装证书才可以链接。比如翻墙设置代理，提示你安装信任证书。描述文件在通用-&gt;描述文件与设备管理中找到。</p>
<h2 id="校验证书的姿势"><a href="#校验证书的姿势" class="headerlink" title="校验证书的姿势"></a>校验证书的姿势</h2><p>校验证书有两种方案：</p>
<blockquote>
<blockquote>
<p>弱校验</p>
</blockquote>
</blockquote>
<p>对于服务端证书，校验下面的case。</p>
<ol>
<li>校验证书的域名</li>
<li>校验证书的有效期</li>
<li>校验证书链和证书的有效性</li>
</ol>
<p>保证这三者有效，已经可以解决大部分的攻击了。唯一的风险就是中间人攻击，被安装CA证书之后，<strong>一个被信任的CA根证书可以生成符合上面要求的任何域名的证书</strong>。存在着风险，但是攻击难度已经大大增加了。<em>AFNetworking框架默认采用的就是这个策略</em>。</p>
<blockquote>
<blockquote>
<p>强校验</p>
</blockquote>
</blockquote>
<p>将证书放入APP中作为证书锚点。在上面的基础上再验证证书。这样可以完全保证服务端的证书是真正需要的证书，从而真正解决中间人攻击。</p>
<p>下面主要讲下强校验面临的坑，各位开发一定要注意。</p>
<h2 id="证书强校验的坑"><a href="#证书强校验的坑" class="headerlink" title="证书强校验的坑"></a>证书强校验的坑</h2><p>证书是有有效期的，尤其是非自制证书，通常都在三年以内（很多资料根本不谈这个问题）。一旦有效期过了，服务端就需要更换证书,但是由于APP存在发版的情况，老的APP由于所有链接失败，导致老APP任何请求都失效，然后无法通知用户更新，老用户也不知道因为什么访问失败。（这些都是血的教训啊）</p>
<p>有几个建议的地方：</p>
<ol>
<li>尽量埋CA证书，因为CA证书的有效期要长，有足够的时间准备。</li>
<li>有些通道不要使用证书强校验，比如检查升级，一些热修复策略，尽量使用自有的安全逻辑保证安全。</li>
<li>如果是自制证书，建议有效期设置长一些。</li>
</ol>
<p>上面的是尽量降低风险，该出问题的时候还是会出，有一些不完美的方案大家可以参考下：</p>
<p>方案1：动态更新证书。</p>
<blockquote>
<blockquote>
<p>在APP中放入RSA公钥，应用启动的时候，证书信息通过私钥加密，发送给前端保存，前端把这个新证书和埋入的证书一起做锚点，进行验证。这样可以保证老APP可以使用一段时间。缺点是这个下发的机制要尽量安全可靠，有可能被攻击者利用，而且后续的请求需要依赖这个请求，所以方案复杂一些。</p>
</blockquote>
</blockquote>
<p>方案2：只验证证书的公钥</p>
<blockquote>
<blockquote>
<p>只使用证书的公钥进行验证，因为更换证书，一般是通过.csr文件生成crt证书文件的（也就是证书文件），在.csr文件没变的情况下，生成的证书的公钥是一致的，也就即使服务端更换了证书，只要公钥不变，依然可以通过验证。所以验证公钥也是相对安全的。缺点是如果新的证书换了公钥还是出问题。我遇到的case就是需要更换私钥和证书算法，公钥也不一样了。</p>
</blockquote>
</blockquote>
<p>其他不太靠谱的方案：</p>
<p>方案3：</p>
<blockquote>
<blockquote>
<p>在弱校验的基础上，加上验证颁发机构。只要读到颁发机构是可信的，证书就认为是有效的。可以解决第三方抓包工具的抓包问题，因为第三方抓包工具，一般使用自己的颁发机构，和实际的颁发机构不一致。缺点是，证书是可以完全伪造的，包括颁发结构的名字，有效期等等都可以伪造。</p>
</blockquote>
</blockquote>
<p>方案4：</p>
<blockquote>
<blockquote>
<p>信任无效的证书。 信任无效的证书，但是做本地证书校验，在失效的一段时间内，后端先不部署新证书，在新版本里面提前埋入新证书，在几个版本后再上线新的证书。优点是简单，不怕哪天忘了更换证书导致出问题。缺点是信任失效的证书，如果真的有需求要强制更换证书，就没办法处理。</p>
</blockquote>
</blockquote>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录:"></a>附录:</h1><h2 id="如何生成自签名证书"><a href="#如何生成自签名证书" class="headerlink" title="如何生成自签名证书"></a>如何生成自签名证书</h2><p>参考 <a href="https://www.zybuluo.com/qidiandasheng/note/713956" target="_blank" rel="external">深入解析HTTPS</a>和<a href="https://my.oschina.net/wayhk/blog/491958?p=1" target="_blank" rel="external">利用OpenSSL创建自签名的SSL证书</a> 和 <a href="http://blog.csdn.net/sdcxyz/article/details/47220129" target="_blank" rel="external">自签名证书和私有CA签名的证书的区别 创建自签名证书 创建私有CA 证书类型 证书扩展名</a></p>
<ol>
<li><p>生成私钥</p>
<p> <code>openssl genrsa -out ca.key 4096</code> </p>
</li>
<li><p>利用私钥创建根证书</p>
<p><code>openssl req -new -x509 -days 36500 -key ca.key -out ca.crt</code></p>
<p>弹出的对话框按照提示填写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  Country Name (2 letter code) [AU]:CN</div><div class="line">State or Province Name (full name) [Some-State]:Guangdong</div><div class="line">Locality Name (eg, city) []:Shenzhen</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:BL.inc</div><div class="line">Organizational Unit Name (eg, section) []:</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:BL</div><div class="line">Email Address []:</div></pre></td></tr></table></figure>
</li>
<li><p>创建SSL证书私钥</p>
<p><code>openssl genrsa -out server.key 4096</code></p>
</li>
<li><p>使用刚才的私钥签名</p>
<p><code>openssl req -new -key server.key -out server.csr</code></p>
<p>弹出的对话框按照提示填写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  Country Name (2 letter code) [AU]:CN</div><div class="line">State or Province Name (full name) [Some-State]:Guangdong</div><div class="line">Locality Name (eg, city) []:Shenzhen</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:BL.inc</div><div class="line">Organizational Unit Name (eg, section) []:</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:*.sina.com.cn</div><div class="line">Email Address []:</div><div class="line"></div><div class="line">Please enter the following &apos;extra&apos; attributes</div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:1111</div><div class="line">An optional company name []:</div></pre></td></tr></table></figure>
<p>注意，这里的Common Name 应该和实际的域名匹配。而且生成的.csr这个文件最好长期保留，下次过期的时候，建议直接用这个文件做签名。如果是向CA颁发机构申请，提交的文件也是这个文件。</p>
</li>
<li><p>对上一步的csr使用CA进行签名生成证书</p>
<p><code>openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt</code>   </p>
<p>如果是向CA机构申请，提交这个文件就可以了。</p>
</li>
<li><p>如果有必要可以重复上面必要步骤，使用上一步的证书的.crt和.key继续签名下一级证书。</p>
<p>一些常用命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  openssl s_client -connect www.google.com:443 &lt;/dev/null 2&gt;/dev/null | openssl x509 -outform DER &gt; https.cer  //获取www.google.com:443的ssl证书，地址可以换成自己的</div><div class="line">openssl rsa -noout -text -in server.key 查看私钥信息</div><div class="line">openssl req -noout -text -in server.csr 查看签名请求信息</div><div class="line">openssl x509 -noout -text -in ca.crt 查看证书信息</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="MAC下使用Charles抓包"><a href="#MAC下使用Charles抓包" class="headerlink" title="MAC下使用Charles抓包"></a>MAC下使用Charles抓包</h2><p>参考 <a href="https://www.zybuluo.com/qidiandasheng/note/713956" target="_blank" rel="external">深入解析HTTPS</a> 和 <a href="http://oncenote.com/2015/09/16/Security-2-HTTPS2/" target="_blank" rel="external">iOS安全系列之二：HTTPS进阶</a></p>
<ul>
<li><p>安装Charles CA根证书 </p>
<p>点击Help-&gt;SSL Proxying-&gt;Install Charles Root Certification …，会弹出如下提示，链接代理，手机浏览器输入chls.pro/ssl，就可以安装根证书了。 </p>
<p><img src="https://github.com/dishibolei/img/raw/master/safe/http/charles_1.png" alt=""></p>
</li>
</ul>
<ul>
<li><p>设置SSL代理 </p>
<p>  点击Proxy-&gt;SSL Proxying Setting，勾选Enable SSL Proxying，然后点击Add输入要SSL代理的请求Host和Port，可以使用通配符来表示某一类请求。<br> <img src="https://github.com/dishibolei/img/raw/master/safe/http/charles_2.png" alt=""></p>
<p> 或者在对应的请求上右键选择Enable SSL Proxying，就会把这一个请求加入到上面的SSL代理列表中（类似于点击Add的效果）。 </p>
<p> <img src="https://github.com/dishibolei/img/raw/master/safe/http/charles_3.png" alt=""></p>
<p>  做完上述步骤后重新请求就能得到解密后的信息了。ps:抓取PC端的HTTPS包也类似，在Help-&gt;SSL Proxying中下载证书，双击安装证书，并选择始终信任即可。</p>
</li>
</ul>
<ul>
<li><p>在iPhone端设置HTTP代理</p>
<p>  在Mac上获取当前机器的IP地址：</p>
<p>  ifconfig en0:</p>
<p>  <img src="https://github.com/dishibolei/img/raw/master/safe/http/charles_4.jpg" alt=""></p>
<p> ch将iPhone连接到与电脑相同的WiFi，在iPhone设置中：无线局域网 -&gt; 已连接WiFi右边的Info详情图标 -&gt; HTTP代理 -&gt; 手动 -&gt; 设置HTTP代理：</p>
<p> <img src="https://github.com/dishibolei/img/raw/master/safe/http/charles_5.jpg" alt=""></p>
<p> 设置完成之后，打开Safari随便访问一个网页，初次设置代理的话，Charles会弹出一个iPhone请求代理的确认框，点击Allow即可。然后在Charles上就可以看到iPhone上的HTTP请求了。为了避免Mac上的请求过多影响对被代理iPhone上HTTP请求的查看和调试，可以在Charles取消Mac的代理：Menu -&gt; Proxy -&gt; 取消勾选Mac OS X Proxy 即可。</p>
</li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><p><a href="http://blog.csdn.net/gueter/archive/2007/03/08/1524447.aspx" target="_blank" rel="external">HTTP协议详解（真的很经典）</a></p>
</li>
<li><p><a href="https://github.com/mqttjs/MQTT.js" target="_blank" rel="external">MQTT_github</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/zhao1949/p/5545064.html" target="_blank" rel="external">说说http协议中的编码和解码</a></p>
</li>
<li><p><a href="https://my.oschina.net/cnlw/blog/168466" target="_blank" rel="external">HTTP协议之multipart/form-data请求分析</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/1ec3fa1ec00f" target="_blank" rel="external">苹果文档翻译 iOS10 NSAppTransportSecurity</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/2bfe1110f3b5" target="_blank" rel="external">iOS中的HTTPS, 你知道多少?</a></p>
</li>
<li><p><a href="http://www.open-open.com/lib/view/open1411260089562.html" target="_blank" rel="external">阮一峰：图解SSL/TLS协议</a></p>
</li>
<li><p><a href="http://kb.cnblogs.com/page/197396/" target="_blank" rel="external">SSL与TLS的区别以及介绍</a></p>
</li>
<li><p><a href="http://www.2cto.com/article/201607/523509.html" target="_blank" rel="external">浅析HTTPS中间人攻击与证书校验</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/LittleHann/p/3733469.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">SSL、TLS协议格式入门学习 - .Little Hann</a></p>
</li>
<li><p><a href="http://oncenote.com/2015/09/16/Security-2-HTTPS2/" target="_blank" rel="external">iOS安全系列之二：HTTPS进阶</a></p>
</li>
<li><p><a href="http://www.open-open.com/lib/view/open1461324289052.html" target="_blank" rel="external">HTTPS 理论详解与实践</a></p>
</li>
<li><p><a href="https://my.oschina.net/wayhk/blog/491958?p=1" target="_blank" rel="external">利用OpenSSL创建自签名的SSL证书</a></p>
</li>
<li><p><a href="http://blog.csdn.net/sdcxyz/article/details/47220129" target="_blank" rel="external">自签名证书和私有CA签名的证书的区别 创建自签名证书 创建私有CA 证书类型 证书扩展名</a></p>
</li>
<li><p><a href="https://www.zybuluo.com/qidiandasheng/note/713956" target="_blank" rel="external">深入解析HTTPS</a></p>
</li>
<li><p><a href="http://www.open-open.com/lib/view/open1477548899809.html" target="_blank" rel="external">TLS/SSL 高级进阶</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;导读：&lt;/p&gt;
&lt;p&gt;本文主要讲在HTTP和HTTPS实际开发中有用和有意思的地方，希望读者能够有所启发。&lt;/p&gt;
&lt;p&gt;主要包括：HTTP和HTTPS的简单介绍。介绍HTTPS加密逻辑。介绍SSL证书和SSL证书校验的规则。&lt;/p&gt;
&lt;p&gt;本文简化了相关的技术细节，主要关注于前端开发需要关注的点和可以借鉴的地方，希望能对开发能有所帮助。开发更关心的技术代码实现细节，会单独文章中说明。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="安全" scheme="https://dishibolei.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="安全" scheme="https://dishibolei.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="HTTPS" scheme="https://dishibolei.github.io/tags/HTTPS/"/>
    
      <category term="SSL证书" scheme="https://dishibolei.github.io/tags/SSL%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
</feed>
